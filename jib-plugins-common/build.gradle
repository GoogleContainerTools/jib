plugins {
  id 'java'
  id 'checkstyle'
  id 'com.github.sherter.google-java-format' version '0.8'
  id 'net.ltgt.apt' version '0.19'
  id 'net.ltgt.errorprone' version '0.6'
}

group 'com.google.cloud.tools'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

repositories {
  mavenCentral()
}

sourceSets {
  main {
    java.srcDir file('../jib-core/src/main/java')
    resources.srcDir file('../jib-core/src/main/resources')
  }
  test {
    java.srcDir file('../jib-core/src/test/java')
    resources.srcDir file('../jib-core/src/test/resources')
  }
}

dependencies {
  // Make sure these are consistent with jib-maven-plugin.
  compile 'com.google.http-client:google-http-client:1.27.0'
  compile 'org.apache.commons:commons-compress:1.18'
  compile 'com.google.guava:guava:27.0.1-jre'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
  compile 'org.ow2.asm:asm:7.0'

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.23.4'
  testCompile 'org.slf4j:slf4j-api:1.7.25'

  // NullAway errorprone plugin
  annotationProcessor 'com.uber.nullaway:nullaway:0.6.4'
  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
  // Using github.com/google/error-prone-javac is required when running on
  // JDK 8. Remove when migrating to JDK 11.
  if (System.getProperty("java.version").startsWith("1.8.")) {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
  }
}

test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

import net.ltgt.gradle.errorprone.CheckSeverity

// Adds NullAway errorprone checks.
tasks.withType(JavaCompile) {
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check('NullAway', CheckSeverity.ERROR)
      option('NullAway:AnnotatedPackages', 'com.google.cloud.tools')
    }
  }
}

// Fail build on javadoc warnings
tasks.withType(Javadoc) {
  options.addBooleanOption('Xwerror', true)
}
assemble.dependsOn javadoc

tasks.withType(Test) {
  reports.html.setDestination file("${reporting.baseDir}/${name}")
}

/* GOOGLE JAVA FORMAT */
googleJavaFormat {
  toolVersion = '1.6'
}
check.dependsOn verifyGoogleJavaFormat
/* GOOGLE JAVA FORMAT */

/* CHECKSTYLE */
checkstyle {
  toolVersion = '8.18'

  // get the google_checks.xml file from the checkstyle jar and take out the java checks
  def googleChecks = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml').asString()
  def fileExtensionsBefore = '<property name="fileExtensions" value="java, properties, xml"/>'
  def fileExtensionsAfter = '<property name="fileExtensions" value="properties, xml"/>'
  def googleChecksNoJava = googleChecks.replace(fileExtensionsBefore, fileExtensionsAfter)
  assert !googleChecks.equals(googleChecksNoJava)

  config = resources.text.fromString(googleChecksNoJava)

  maxErrors = 0
  maxWarnings = 0
}
/* CHECKSTYLE */
