plugins {
  id 'java-library'
  id 'checkstyle'
  id 'com.github.sherter.google-java-format' version '0.7.1'
  id 'net.ltgt.apt' version '0.13'
  id 'net.ltgt.errorprone' version '0.0.13'
  id 'biz.aQute.bnd.builder' version '4.0.0'

  // For release.
  id 'maven'
  id 'net.researchgate.release' version '2.7.0'
}

group 'com.google.cloud.tools'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

repositories {
  mavenCentral()
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  // Make sure these are consistent with jib-maven-plugin.
  implementation 'com.google.http-client:google-http-client:1.23.0'
  implementation 'org.apache.commons:commons-compress:1.18'
  implementation 'com.google.guava:guava:23.5-jre'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
  implementation 'org.javassist:javassist:3.22.0-GA'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.12.0'
  testImplementation 'org.slf4j:slf4j-api:1.7.25'

  // NullAway errorprone plugin
  apt 'com.uber.nullaway:nullaway:0.4.2'
  errorprone 'com.google.errorprone:error_prone_core:2.2.0'
}

jar {
  manifest {
    attributes 'Implementation-Version': version

    // OSGi metadata
    attributes 'Bundle-SymbolicName': 'com.google.cloud.tools.jib'
    attributes 'Bundle-Name': 'Jib library for building Docker and OCI images'
    attributes 'Bundle-Vendor': 'Google LLC'
    attributes 'Bundle-DocURL': 'https://github.com/GoogleContainerTools/jib'
    attributes 'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0'
    attributes 'Export-Package': 'com.google.cloud.tools.jib.*'
  }
}

// Integration tests must be run explicitly
task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  systemProperty '_JIB_DISABLE_USER_AGENT', true
}
integrationTest.dependsOn test

test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

// Adds NullAway errorprone checks.
tasks.withType(JavaCompile) {
  if (!name.toLowerCase().contains("test")) {
    options.compilerArgs += ["-Xep:NullAway:ERROR", "-XepOpt:NullAway:AnnotatedPackages=com.google.cloud.tools"]
  }
}

// Fail build on javadoc warnings
tasks.withType(Javadoc) {
  options.addBooleanOption('Xwerror', true)
}
assemble.dependsOn javadoc

tasks.withType(Test) {
  reports.html.setDestination file("${reporting.baseDir}/${name}")
}

/* GOOGLE JAVA FORMAT */
googleJavaFormat {
  toolVersion = '1.6'
}
check.dependsOn verifyGoogleJavaFormat
/* GOOGLE JAVA FORMAT */

/* CHECKSTYLE */
checkstyle {
  toolVersion = "7.6.1"

  // get the google_checks.xml file from the checkstyle jar and take out the java checks
  def googleChecks = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml').asString()
  def fileExtensionsBefore = '<property name="fileExtensions" value="java, properties, xml"/>'
  def fileExtensionsAfter = '<property name="fileExtensions" value="properties, xml"/>'
  def googleChecksNoJava = googleChecks.replace(fileExtensionsBefore, fileExtensionsAfter)
  assert !googleChecks.equals(googleChecksNoJava)

  config = resources.text.fromString(googleChecksNoJava)

  maxErrors = 0
  maxWarnings = 0
}
/* CHECKSTYLE */

/* RELEASE */
task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier 'javadoc'
}

task writePom {
  project.afterEvaluate {
    def outputFile = file("${project.buildDir}/pom/${project.name}-${project.version}.pom")
    outputs.file outputFile

    doLast {
      pom {
        project {
          name 'Jib Core'
          description 'Build container images.'
          url 'https://github.com/GoogleContainerTools/jib'
          inceptionYear '2018'

          scm {
            url 'https://github.com/GoogleContainerTools/jib'
            connection 'scm:https://github.com/GoogleContainerTools/jib.git'
            developerConnection 'scm:git://github.com/GoogleContainerTools/jib.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'coollog'
              name 'Qingyang Chen'
              email 'qingyangc@google.com'
            }
            developer {
              id 'loosebazooka'
              name 'Appu Goundan'
              email 'appu@google.com'
            }
            developer {
              id 'TadCordle'
              name 'Tad Cordle'
              email 'tcordle@google.com'
            }
            developer {
              id 'chanseokoh'
              name 'Chanseok Oh'
              email 'chanseok@google.com'
            }
            developer {
              id 'briandealwis'
              name 'Brian de Alwis'
              email 'bdealwis@google.com'
            }
          }
        }
      }.writeTo(outputFile)
    }
  }
}

// For Kokoro sign and releases
task prepareRelease(type: Copy) {
  from jar
  from sourceJar
  from javadocJar
  from writePom
  into "${project.buildDir}/release-artifacts"
  dependsOn build
  dependsOn cleanPrepareRelease
}
// Release plugin (git release commits and version updates)
release {
  tagTemplate = 'v$version-core'
  git {
    requireBranch = /^core_release_v\d+.*$/  //regex
  }
}
/* RELEASE */
